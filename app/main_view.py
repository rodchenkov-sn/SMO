from model.session import Session, SimulationEvent
from model.properties import default_properties, SimulationProperties
from app.element_names import *

import PySimpleGUI as Sg


class MainView:
    def __init__(self):
        self.__working = False
        self.__default_data = [
            ['<3', 'System ready', 'Ready', 'Ready']
        ]
        self.__table_data = self.__default_data.copy()
        self.__table_heading = ['Time', 'Event', 'Devices', 'Buffer']

        self.__default_results = [
            ['Unknown', '?']
        ]
        self.__results_data = self.__default_results
        self.__results_heading = ['Name', 'Value']

        self.__simulation_properties = default_properties()

        self.__layout = [
            [Sg.Table(values=self.__table_data,
                      headings=self.__table_heading,
                      col_widths=[10, 50, 30, 30],
                      auto_size_columns=False,
                      key=STEPS_TBL,
                      row_height=25,
                      num_rows=15,
                      alternating_row_color='#74879d'
                      )
             ],
            [Sg.Button(STEP_BTN), Sg.Button(AUTO_BTN), Sg.Button(RESET_BTN)],
            [Sg.Table(values=self.__results_data,
                      headings=self.__results_heading,
                      col_widths=[60, 60],
                      auto_size_columns=False,
                      key=RESULTS_TBL,
                      row_height=25,
                      num_rows=10,
                      alternating_row_color='#74879d'
                      )
             ],
            [Sg.Text('Sources:'), Sg.Input(default_text=self.__srcs_to_input(), key=SOURCES_INP)],
            [Sg.Text('Devices:'), Sg.Input(default_text=self.__srcs_to_input(), key=DEVICES_INP)],
            [Sg.Text('Buffer capacity:'), Sg.Input(default_text=self.__buff_to_input(), key=BUFFER_INP)],
            [Sg.Text('Max requests: '), Sg.Input(default_text=self.__max_req_to_input(), key=MAX_REQ_INP)],
            [Sg.Button(APPLY_BTN)]
        ]
        self.__session = Session(self.__simulation_properties)
        self.__window = Sg.Window('SMO', self.__layout)
        self.__actions = {
            STEP_BTN: self.__on_step,
            AUTO_BTN: self.__on_auto,
            RESET_BTN: self.__on_reset,
            APPLY_BTN: self.__on_apply
        }
        self.__messages_templates = {
            SimulationEvent.REQUEST_HANDLED: '{} handles request',
            SimulationEvent.REQUEST_GENERATED: '{} generates request',
            SimulationEvent.DEVICE_PAUSED: '{} paused',
            SimulationEvent.REQUEST_HANDLED_IMMEDIATE: '{} handles request generated by {}'
        }

    def __devs_to_input(self) -> str:
        return ' '.join(map(str, self.__simulation_properties.device_taus))

    def __srcs_to_input(self) -> str:
        return ' '.join(map(str, self.__simulation_properties.source_lambdas))

    def __buff_to_input(self) -> str:
        return str(self.__simulation_properties.buffer_capacity)

    def __max_req_to_input(self) -> str:
        return str(self.__simulation_properties.max_requests)

    def run(self):
        while True:
            event, values = self.__window.read()
            if event == Sg.WIN_CLOSED:
                break
            self.__actions[event](values)

    def __update_on_snapshot(self, snapshot):
        self.__table_data.insert(0, [
            f'{snapshot.time:9.3f}',
            self.__messages_templates[snapshot.event_type].format(snapshot.actor, snapshot.actor2),
            ' '.join(map(lambda s: str(s) if s is not None else '_', snapshot.device_requests)),
            str(snapshot.buffer_state)
        ])
        self.__window.Element(STEPS_TBL).Update(values=self.__table_data)

    def __simulation_started(self):
        if not self.__working:
            self.__working = True
            for inp in MAIN_WND_INPUTS:
                self.__window.Element(inp).Update(disabled=True)

    def __simulation_ended(self):
        if self.__working:
            self.__working = False
            for inp in MAIN_WND_INPUTS:
                self.__window.Element(inp).Update(disabled=False)

    def __on_step(self, _):
        self.__simulation_started()
        snapshot = self.__session.step()
        self.__update_on_snapshot(snapshot)
        self.__update_stats(snapshot.stats)

    def __update_stats(self, stats):
        try:
            self.__results_data = [
                ['Pause ratio', f'{stats.pause_ratio:4.3f}'],
                ['Total generated', str(stats.total_generated)],
                ['Total handled', str(stats.total_handled)],
                ['Total rejected', str(stats.total_rejected)],
                ['Average wait time', f'{stats.average_wait_time:8.3f}'],
                ['Average handle time', f'{stats.average_handle_time:8.3f}']
            ]
            self.__results_data += [
                [f'Pause ratio for {i}', f'{r:4.3f}'] for i, r in enumerate(stats.pause_ratio_by_device)
            ]
            self.__results_data += [
                [f'Handled from {i}', str(h)] for i, h in enumerate(stats.total_handled_by_source)
            ]
            self.__results_data += [
                [f'Rejected from {i}', str(r)] for i, r in enumerate(stats.total_rejected_by_source)
            ]
            self.__results_data += [
                [f'Rejection probability for {i}', f'{p:4.3f}'] for i, p in enumerate(stats.rejection_probability_by_source)
            ]
            self.__results_data += [
                [f'Average wait time for {i}', f'{t:8.3f}'] for i, t in enumerate(stats.average_wait_time_by_source)
            ]
            self.__results_data += [
                [f'Average handle time for {i}', f'{t:8.3f}'] for i, t in enumerate(stats.average_handle_time_by_source)
            ]
            self.__window.Element(RESULTS_TBL).Update(values=self.__results_data)
        except ZeroDivisionError:
            pass

    def __on_auto(self, _):
        self.__simulation_started()
        stats = self.__session.run()
        self.__update_stats(stats)

    def __on_reset(self, _):
        self.__simulation_ended()
        self.__table_data = self.__default_data.copy()
        self.__results_data = self.__default_results
        self.__session = Session(self.__simulation_properties)
        self.__window.Element(RESULTS_TBL).Update(values=self.__results_data)
        self.__window.Element(STEPS_TBL).Update(values=self.__table_data)

    def __on_apply(self, values):
        try:
            source_lambdas = list(map(float, values[SOURCES_INP].split(' ')))
            device_taus = list(map(float, values[DEVICES_INP].split(' ')))
            buffer_capacity = int(values[BUFFER_INP])
            max_requests = int(values[MAX_REQ_INP])
            self.__simulation_properties = SimulationProperties(source_lambdas, device_taus,
                                                                buffer_capacity, max_requests)
            self.__session = Session(self.__simulation_properties)
        except ValueError:
            Sg.Popup('Invalid format', 'Input parameters have invalid format.')
